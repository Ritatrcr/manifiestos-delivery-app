name: Package & Publish Helm (to helm-chart repo + GitHub Pages)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  package_publish:
    runs-on: ubuntu-latest

    env:
      # === Chart origen (en este repo) ===
      HELM_CHART_DIR: charts/pedido-app
      HELM_CHART_NAME: pedido-app

      # === Repo de destino (Pages) ===
      HELM_PAGES_REPO: ritatrcr/helm-chart
      HELM_PAGES_BRANCH: main
      HELM_REPO_URL: https://ritatrcr.github.io/helm-chart/   # URL pública de Pages

    steps:
      # 1) Checkout del repo donde está el chart (este repo)
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # evitamos que quede el GITHUB_TOKEN por defecto

      # 2) Checkout del repo de Pages (destino)
      - name: Checkout helm-chart repo (Pages)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.HELM_PAGES_REPO }}
          ref: ${{ env.HELM_PAGES_BRANCH }}
          path: helm-pages
          token: ${{ secrets.PAT_HELMCHART }}
          persist-credentials: false

      # 3) Herramientas
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Install yq
        shell: bash
        run: |
          set -euxo pipefail
          YQ_VERSION=v4.44.3
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          helm version && yq --version

      # 4) Lint del chart
      - name: Lint chart
        shell: bash
        run: |
          set -euxo pipefail
          cd "${HELM_CHART_DIR}"
          helm lint .

      # 4.1) Auto bump de versión (patch) en Chart.yaml y push al repo de manifiestos (robusto)
      - name: Auto bump Chart.yaml (patch) and push
        shell: bash
        env:
          PAT_USER: ${{ secrets.PAT_HELMCHART_USER }}   # ej: ritatrcr
          PAT_TOKEN: ${{ secrets.PAT_HELMCHART }}       # PAT con RW a este repo
        run: |
          set -euxo pipefail
          cd "${HELM_CHART_DIR}"

          # Lee versión actual (puede traer prerelease/build), ej: 0.1.9+12 o 0.1.9-rc.1
          CUR_RAW=$(yq -r '.version // "0.1.0"' Chart.yaml)
          # Normaliza a MA.MIN.PA (descarta sufijos - / +)
          CUR_BASE=$(echo "$CUR_RAW" | sed -E 's/^([0-9]+)\.([0-9]+)\.([0-9]+).*$/\1.\2.\3/; t; s/^([0-9]+)\.([0-9]+).*$/\1.\2.0/')
          IFS=. read -r MA MI PA <<< "$CUR_BASE"
          NEXT="${MA}.${MI}.$((PA+1))"

          echo "Versión actual: $CUR_RAW  (base: $CUR_BASE) -> nueva: $NEXT"

          # Escribe y valida
          yq -i ".version = \"${NEXT}\"" Chart.yaml
          NEW=$(yq -r '.version' Chart.yaml)
          if [ "$NEW" != "$NEXT" ]; then
            echo "::error::No se pudo actualizar Chart.yaml a $NEXT (quedó $NEW)"; exit 1
          fi

          # Commit del bump
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add Chart.yaml
          git commit -m "chore(chart): bump version to ${NEXT}" || echo "No commit needed"

          # Sincroniza con remoto y empuja usando PAT
          cd "$GITHUB_WORKSPACE"
          git fetch origin main
          git pull --rebase origin main || true
          git remote set-url origin "https://${PAT_USER}:${PAT_TOKEN}@github.com/${{ github.repository }}.git"
          git push origin main || true

      # 5) Preparar árbol limpio en el repo de Pages (evita unstaged changes)
      - name: Prepare clean main in helm-chart repo
        shell: bash
        run: |
          set -euxo pipefail
          cd helm-pages
          git fetch --all
          git checkout "${HELM_PAGES_BRANCH}"
          git reset --hard "origin/${HELM_PAGES_BRANCH}"
          git clean -fdx
          git status

      # 6) Empaquetar el chart directamente dentro del repo de Pages
      - name: Package chart into helm-pages/
        id: pkg
        shell: bash
        run: |
          set -euxo pipefail
          # Lee la versión que quedó en Chart.yaml DESPUÉS del bump (fuente de la verdad)
          WANT_VERSION=$(yq -r '.version' "${HELM_CHART_DIR}/Chart.yaml")
          echo "WANT_VERSION=$WANT_VERSION"

          # Empaquetar
          cd "${HELM_CHART_DIR}"
          helm package . -d "$GITHUB_WORKSPACE/helm-pages"

          # Detectar el tgz más reciente
          PKG_PATH="$(ls -1t "$GITHUB_WORKSPACE/helm-pages/${HELM_CHART_NAME}-"*.tgz | head -n 1)"
          test -f "$PKG_PATH"
          echo "PKG_PATH=$PKG_PATH" >> "$GITHUB_OUTPUT"
          echo "PKG_PATH=$PKG_PATH"

          # Extraer versión del .tgz y compararla con Chart.yaml
          PKG_FILE="$(basename "$PKG_PATH")"
          CHART_VERSION="${PKG_FILE#${HELM_CHART_NAME}-}"
          CHART_VERSION="${CHART_VERSION%.tgz}"
          echo "CHART_VERSION=$CHART_VERSION" >> "$GITHUB_OUTPUT"
          echo "CHART_VERSION=$CHART_VERSION"

          if [ "$CHART_VERSION" != "$WANT_VERSION" ]; then
            echo "::error::El .tgz ($CHART_VERSION) no coincide con Chart.yaml ($WANT_VERSION)"; exit 1
          fi

      # 7) Verificar que values-dev/prod están dentro del .tgz
      - name: Assert values-dev/prod inside tgz
        shell: bash
        run: |
          set -euxo pipefail
          tar -tzf "${{ steps.pkg.outputs.PKG_PATH }}" | grep -E 'values-(dev|prod)\.yaml'

      # 8) Generar/actualizar index.yaml (merge) en el repo de Pages
      - name: Update Helm repo index (merge) in helm-pages
        shell: bash
        run: |
          set -euxo pipefail
          cd helm-pages
          if [ -f index.yaml ]; then
            helm repo index . --url "${HELM_REPO_URL}" --merge index.yaml
          else
            helm repo index . --url "${HELM_REPO_URL}"
          fi
          echo "==== index.yaml (head) ===="
          head -n 20 index.yaml
          echo "==== paquetes ===="
          ls -lh *.tgz

      # 9) Commit & push al repo de Pages usando PAT (evita 403)
      - name: Commit & push changes (to helm-chart repo)
        shell: bash
        env:
          PAT_USER: ${{ secrets.PAT_HELMCHART_USER }}   # ej: ritatrcr
          PAT_TOKEN: ${{ secrets.PAT_HELMCHART }}       # PAT con Contents: Read/Write
        run: |
          set -euxo pipefail
          cd helm-pages
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          git commit -m "Publish chart ${HELM_CHART_NAME} ${{ steps.pkg.outputs.CHART_VERSION }}" || echo "No commit needed"
          git remote set-url origin "https://${PAT_USER}:${PAT_TOKEN}@github.com/${{ env.HELM_PAGES_REPO }}.git"
          git push origin "${HELM_PAGES_BRANCH}"
